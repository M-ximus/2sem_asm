Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 1
frame.asm



      1				     Public Frame
      2	0000			     model tiny
      3	0000			     .code
      4
      5	      =000A		     LHX = 10
      6	      =000A		     LHY = 10
      7	      =0046		     RLX = 70
      8	      =0014		     RLY = 20
      9				     ;-------------------------------------------------------------------------------
     10				     ;Print colour frame
     11				     ;
     12				     ;Entry:
     13				     ;	     lx	- x coordinate of left top point
     14				     ;	     ly	- y coordinate of left top point
     15				     ;	     rx	- x coordinate of right	bottom point
     16				     ;	     ry	- y coordinate of right	bottom point
     17				     ;	     colour
     18				     ;Exit:
     19				     ;	     no	exit param
     20				     ;Distr:
     21				     ;	     ax, bx, cx, dx
     22				     ;
     23				     ;-------------------------------------------------------------------------------
     24	0000			     Frame proc
     25
     26	0000  55				     push bp
     27	0001  8B EC				     mov bp, sp
     28
     29	0003  56				     push si
     30	0004  06				     push es;				     save registers
     31				     ;-------------------------------------------------------------------------------
     32
     33	0005  B8 B800				     mov ax, 0b800h;			     address of	video mem
     34	0008  8E C0				     mov es, ax
     35
     36	000A  8B 4E 08				     mov cx, [bp + 08h];		     rx
     37	000D  8B 46 04				     mov ax, [bp + 04h];		     lx
     38	0010  2B C8				     sub cx, ax;			     cx	= rx - lx
     39	0012  D1 E1				     shl cx, 1;				     cx	= (rx -	lx) * 2
     40
     41	0014  8B 5E 06				     mov bx, [bp + 06h];		     ly
     42	0017  8B D3				     mov dx, bx
     43	0019  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 7
     44	      E2 D1 E2 D1 E2 D1	E2
     45	0027  D1 E3 D1 E3 D1 E3	D1+		     shl bx, 5
     46	      E3 D1 E3
     47	0031  03 DA				     add bx, dx;			     bx	= ly*160
     48
     49	0033  8B 46 0A				     mov ax, [bp + 0ah]
     50	0036  8B D0				     mov dx, ax
     51	0038  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 7
     52	      E0 D1 E0 D1 E0 D1	E0
     53	0046  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 5
     54	      E2 D1 E2
     55	0050  03 D0				     add dx, ax;			     dx	= ry*160
     56
     57	0052  8B 46 04				     mov ax, [bp + 04h]
Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 2
frame.asm



     58	0055  D1 E0				     shl ax, 1;				     ax	= lx * 2
     59	0057  03 D8				     add bx, ax;			     bx	= 160*ly + 2*lx
     60
     61	0059  8B 46 0C				     mov ax, [bp + 0ch];		     ax	= colour
     62	005C  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 8
     63	      E0 D1 E0 D1 E0 D1	E0+
     64	      D1 E0
     65	006C  B0 BA				     mov al, 0bah;			     ax	= colour + symbol
     66
     67				     ;-------------------------------------------------------------------------------
     68				     ;ax colour	| symbol
     69				     ;bx = 160*ly + 2*lx - start position
     70				     ;cx = 2 * (rx - lx) - right line
     71				     ;dx = ry *	160	 - stop	position
     72				     ;-------------------------------------------------------------------------------
     73	006E					     while_g:
     74	006E  26: 89 07				     mov word ptr es:[bx], ax
     75	0071  03 D9				     add bx, cx
     76	0073  26: 89 07				     mov word ptr es:[bx], ax
     77	0076  2B D9				     sub bx, cx
     78	0078  81 C3 00A0			     add bx, 160
     79	007C  3B DA				     cmp bx, dx
     80	007E  72 EE				     jb	while_g
     81				     ;-------------------------------------------------------------------------------
     82
     83	0080  8B 5E 06				     mov bx, [bp + 06h]
     84	0083  8B C3				     mov ax, bx
     85	0085  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 5
     86	      E0 D1 E0
     87	008F  D1 E3 D1 E3 D1 E3	D1+		     shl bx, 7
     88	      E3 D1 E3 D1 E3 D1	E3
     89	009D  03 D8				     add bx, ax;				     bx	= 160 *	ly
     90
     91	009F  8B 46 04				     mov ax, [bp + 04h]
     92	00A2  D1 E0				     shl ax, 1
     93	00A4  03 D8				     add bx, ax;				     bx	= 160 *	ly + 2 * lx *
     94
     95	00A6  8B D3				     mov dx, bx
     96	00A8  2B D0				     sub dx, ax
     97	00AA  8B 46 08				     mov ax, [bp + 08h]
     98	00AD  D1 E0				     shl ax, 1
     99	00AF  03 D0				     add dx, ax;				     dx	= 160 *	ly + 2 * rx
    100
    101	00B1  8B 4E 0A				     mov cx, [bp + 0ah]
    102	00B4  8B 46 06				     mov ax, [bp + 06h]
    103	00B7  03 C8				     add cx, ax
    104	00B9  8B C8				     mov cx, ax
    105	00BB  D1 E1 D1 E1 D1 E1	D1+		     shl cx, 7
    106	      E1 D1 E1 D1 E1 D1	E1
    107	00C9  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 5
    108	      E0 D1 E0
    109	00D3  03 C8				     add cx, ax;				     cx	= 160 *	(ry - ly)
    110
    111	00D5  8B 46 0C				     mov ax, [bp + 0ch]
    112	00D8  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 8
    113	      E0 D1 E0 D1 E0 D1	E0+
    114	      D1 E0
Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 3
frame.asm



    115	00E8  B0 CD				     mov al, 0cdh;   ax	= colour | symbol
    116
    117				     ;------------------------------------------------------------------------------
    118				     ;ax - colour | symbol
    119				     ;bx = 160 * ly + 2	* lx - start pixel
    120				     ;cx = 160 * (ry - ly)   - jump to bottom line
    121				     ;dx = 160 * ly + 2	* rx - stop pixel
    122				     ;------------------------------------------------------------------------------
    123	00EA					     while_h:
    124	00EA  26: 89 07				     mov word ptr es:[bx], ax
    125	00ED  03 D9				     add bx, cx
    126	00EF  26: 89 07				     mov word ptr es:[bx], ax
    127	00F2  2B D9				     sub bx, cx
    128	00F4  83 C3 02				     add bx, 2
    129	00F7  3B DA				     cmp bx, dx
    130	00F9  72 EF				     jb	while_h
    131				     ;------------------------------------------------------------------------------
    132
    133	00FB  B0 C9				     mov al, 0c9h;				     new symbol
    134
    135	00FD  8B 5E 04				     mov bx, [bp + 04h]
    136	0100  D1 E3				     shl bx, 1;					     bx	= lx * 2
    137
    138	0102  8B 4E 06				     mov cx, [bp + 06h]
    139	0105  8B D1				     mov dx, cx
    140	0107  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 5
    141	      E2 D1 E2
    142	0111  D1 E1 D1 E1 D1 E1	D1+		     shl cx, 7
    143	      E1 D1 E1 D1 E1 D1	E1
    144	011F  03 CA				     add cx, dx;				     cx	= ly * 160
    145
    146	0121  03 D9				     add bx, cx
    147
    148	0123  26: 89 07				     mov word ptr es:[bx], ax
    149				     ;------------------------------------------------------------------------------
    150
    151	0126  B0 BB				     mov al, 0bbh
    152
    153	0128  8B D9				     mov bx, cx;				     bx	= ly * 160
    154	012A  8B 56 08				     mov dx, [bp + 08h]
    155	012D  D1 E2				     shl dx, 1;					     dx	= rx * 2
    156	012F  03 DA				     add bx, dx
    157
    158	0131  26: 89 07				     mov word ptr es:[bx], ax
    159				     ;------------------------------------------------------------------------------
    160	0134  B0 C8				     mov al, 0c8h
    161
    162	0136  8B 4E 0A				     mov cx, [bp + 0ah]
    163	0139  8B D1				     mov dx, cx
    164	013B  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 5
    165	      E2 D1 E2
    166	0145  D1 E1 D1 E1 D1 E1	D1+		     shl cx, 7
    167	      E1 D1 E1 D1 E1 D1	E1
    168	0153  03 CA				     add cx, dx;				     cx	= ry * 160
    169
    170	0155  8B 5E 04				     mov bx, [bp + 04h]
    171	0158  D1 E3				     shl bx, 1
Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 4
frame.asm



    172	015A  03 D9				     add bx, cx
    173
    174	015C  26: 89 07				     mov word ptr es:[bx], ax
    175				     ;------------------------------------------------------------------------------
    176
    177	015F  B0 BC				     mov al, 0bch
    178
    179	0161  8B 5E 08				     mov bx, [bp + 08h]
    180	0164  D1 E3				     shl bx, 1
    181	0166  03 D9				     add bx, cx;				     bx	= ry * 160 + rx	* 2
    182
    183	0168  26: 89 07				     mov word ptr es:[bx], ax
    184				     ;------------------------------------------------------------------------------
    185
    186	016B  8B 5E 06				     mov bx, [bp + 06h]
    187	016E  83 C3 01				     add bx, 1
    188	0171  8B D3				     mov dx, bx
    189	0173  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 5
    190	      E2 D1 E2
    191	017D  D1 E3 D1 E3 D1 E3	D1+		     shl bx, 7
    192	      E3 D1 E3 D1 E3 D1	E3
    193	018B  03 DA				     add bx, dx
    194
    195	018D  8B 4E 04				     mov cx, [bp + 04h]
    196	0190  D1 E1				     shl cx, 1
    197
    198	0192  03 D9				     add bx, cx;				     bx	= ly * 160 + lx	* 2
    199	0194  83 C3 02				     add bx, 2
    200
    201	0197  8B 56 0A				     mov dx, [bp + 0ah]
    202	019A  8B CA				     mov cx, dx
    203	019C  D1 E2 D1 E2 D1 E2	D1+		     shl dx, 7
    204	      E2 D1 E2 D1 E2 D1	E2
    205	01AA  D1 E1 D1 E1 D1 E1	D1+		     shl cx, 5
    206	      E1 D1 E1
    207	01B4  03 D1				     add dx, cx;				     dx	= ry * 160
    208
    209	01B6  8B 4E 06				     mov cx, [bp + 06h]
    210	01B9  83 C1 01				     add cx, 1
    211	01BC  8B C1				     mov ax, cx
    212	01BE  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 7
    213	      E0 D1 E0 D1 E0 D1	E0
    214	01CC  D1 E1 D1 E1 D1 E1	D1+		     shl cx, 5
    215	      E1 D1 E1
    216	01D6  03 C8				     add cx, ax
    217	01D8  8B 46 08				     mov ax, [bp + 08h]
    218	01DB  D1 E0				     shl ax, 1
    219	01DD  03 C8				     add cx, ax;				     cx	= ly * 160 + rx	* 2
    220
    221	01DF  8B 46 0C				     mov ax, [bp + 0ch]
    222	01E2  D1 E0 D1 E0 D1 E0	D1+		     shl ax, 8
    223	      E0 D1 E0 D1 E0 D1	E0+
    224	      D1 E0
    225
    226
    227	01F2  8B F3				     mov si, bx
    228
Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 5
frame.asm



    229	01F4					     while_space_horiz:
    230
    231
    232	01F4					     while_space_vertic:
    233	01F4  26: 89 07				     mov word ptr es:[bx], ax
    234	01F7  83 C3 02				     add bx, 2
    235	01FA  3B D9				     cmp bx, cx
    236	01FC  72 F6				     jb	while_space_vertic
    237
    238	01FE  81 C6 00A0			     add si, 160
    239	0202  8B DE				     mov bx, si
    240	0204  81 C1 00A0			     add cx, 160
    241	0208  3B DA				     cmp bx, dx
    242	020A  72 E8				     jb	while_space_horiz
    243
    244				     ;------------------------------------------------------------------------------
    245
    246	020C  07				     pop es
    247	020D  5E				     pop si
    248	020E  5D				     pop bp
    249	020F  C2 000A		     ret 0ah
    250
    251	0212			     endp
    252
    253				     end
Turbo Assembler	 Version 4.1	    02/28/19 23:34:32	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/28/19"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "23:34:32"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
FRAME				  Near	 DGROUP:0000
LHX				  Number 000A
LHY				  Number 000A
RLX				  Number 0046
RLY				  Number 0014
WHILE_G				  Near	 DGROUP:006E
WHILE_H				  Near	 DGROUP:00EA
WHILE_SPACE_HORIZ		  Near	 DGROUP:01F4
WHILE_SPACE_VERTIC		  Near	 DGROUP:01F4

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0212 Word	  Public  CODE
